name: Build, Test, and Deploy Blog Service

on:
  pull_request:
    branches:
      - main
    paths:
      - 'backend/blog-service/**'
  push:
    branches:
      - main
    paths:
      - 'backend/blog-service/**'

env:
  DOCKERHUB_USERNAME: lcdev25
  REGISTRY: docker.io/lcdev25  # Replace with your Docker Hub username
  MODULE_NAME: blog-service  # Replace with the module name
  IMAGE_NAME: devblog-blog-service
  UUID: ${{ github.sha }}        # Using the commit SHA as UUID

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Extract current version from POM
        id: extract_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f backend/${{ env.MODULE_NAME }}/pom.xml)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Build with Maven
        run: cd backend && mvn -pl ${{ env.MODULE_NAME }} clean install

      - name: Run Tests
        run: cd backend && mvn -pl ${{ env.MODULE_NAME }} test

      - name: Set up QEMU
        if: github.event_name == 'push'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        if: github.event_name == 'push'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name == 'push'
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ env.DOCKERHUB_USERNAME }} --password-stdin

      - name: Set up environment variables
        run: |
          echo "TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.UUID }}" >> $GITHUB_ENV

      - name: Build and push multi-architecture image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v6
        with:
          context: backend/${{ env.MODULE_NAME }}
          push: true
          tags: ${{ env.TAG }}
          platforms: linux/arm64

      - name: Print Kubernetes Deployment Commands
        if: github.event_name == 'push'
        run: |
          echo "helm dependency update ./deployment/app"
          echo "helm upgrade --install devblog-app ./deployment/app -f ./deployment/app/values.yaml \\"
          echo "  --set ${{ env.MODULE_NAME }}.codeVersion=${{ env.CURRENT_VERSION }} \\"
          echo "  --set ${{ env.MODULE_NAME }}.enabled=true \\"
          echo "  --set ${{ env.MODULE_NAME }}.image.tag=${{ env.TAG }}"        

  cleanup:
    runs-on: ubuntu-latest
    needs: build-and-deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up jq
        run: sudo apt-get install jq -y

      - name: Set Docker Hub URL
        run: echo "DOCKERHUB_URL=https://hub.docker.com/v2/repositories/${{ env.DOCKERHUB_USERNAME }}/${IMAGE_NAME}/tags" >> $GITHUB_ENV

      - name: List images in Docker Hub and delete all except last 2
        id: list_images
        env:
          DOCKERHUB_USERNAME: ${{ env.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # Get a token for Docker Hub
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'$DOCKERHUB_USERNAME'", "password": "'$DOCKERHUB_TOKEN'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          # List images
          IMAGE_LIST=$(curl -s -H "Authorization: JWT $TOKEN" "$DOCKERHUB_URL" | jq -r '.results[].name')
          
          # Split the image list into an array
          IMAGE_IDS=()
          while IFS= read -r line; do
            IMAGE_IDS+=("$line")
          done <<< "$IMAGE_LIST"
          
          # Number of images to keep
          IMAGES_TO_KEEP=2
          
          # Check if the number of images exceeds the number to keep
          if [ ${#IMAGE_IDS[@]} -gt $IMAGES_TO_KEEP ]; then
            # Images to delete
            IMAGES_TO_DELETE=("${IMAGE_IDS[@]:$IMAGES_TO_KEEP}")
          
            # Delete old images
            for IMAGE_ID in "${IMAGES_TO_DELETE[@]}"; do
              curl -s -X DELETE -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/${DOCKERHUB_USERNAME}/${IMAGE_NAME}/tags/${IMAGE_ID}/"
            done
          fi