name: Build, Test, and Deploy Blog Service

on:
  pull_request:
    branches:
      - main
    paths:
      - 'backend/blog-service/**'
  push:
    branches:
      - main
    paths:
      - 'backend/blog-service/**'

env:
  REGISTRY: ghcr.io/lcdev25  # Replace with your GitHub username
  MODULE_NAME: blog-service  # Replace with the module name
  IMAGE_NAME: devblog-blog-service
  UUID: ${{ github.sha }}        # Using the commit SHA as UUID

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Extract current version from POM
        id: extract_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f backend/${{ env.MODULE_NAME }}/pom.xml)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Set GHCR_URL
        run: echo "GHCR_URL=https://api.github.com/users/${GITHUB_REPOSITORY_OWNER}/packages/container/${IMAGE_NAME}/versions" >> $GITHUB_ENV

      - name: Build with Maven
        run: cd backend && mvn -pl ${{ env.MODULE_NAME }} clean install

      - name: Run Tests
        run: cd backend && mvn -pl ${{ env.MODULE_NAME }} test

      - name: Set up QEMU
        if: github.event_name == 'push'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Docker Buildx
        if: github.event_name == 'push'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Set up environment variables
        run: |
          echo "TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.UUID }}" >> $GITHUB_ENV

      - name: Build and push multi-architecture image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v6
        with:
          context: backend/${{ env.MODULE_NAME }}
          push: true
          tags: ${{ env.TAG }}
          platforms: linux/arm64

      - name: Print Kubernetes Deployment Commands
        if: github.event_name == 'push'
        run: |
          echo "helm dependency update ./deployment/app"
          echo "helm upgrade --install devblog-app ./deployment/app -f ./deployment/app/values.yaml \\"
          echo "  --set ${{ env.MODULE_NAME }}.codeVersion=${{ env.CURRENT_VERSION }} \\"
          echo "  --set ${{ env.MODULE_NAME }}.enabled=true \\"          
          echo "  --set ${{ env.MODULE_NAME }}.image.tag=${{ env.TAG }}"        

  #      - name: Set up Kubeconfig
  #        if: github.event_name == 'push'
  #        run: |
  #          mkdir -p ~/.kube
  #          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > ~/.kube/config
  #          chmod 600 ~/.kube/config  # Change permissions to be readable only by the owner
  #
  #      - name: Test kubectl
  #        if: github.event_name == 'push'
  #        run: echo "$(kubectl get nodes)"
  #
  #      - name: Install Helm
  #        if: github.event_name == 'push'
  #        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  #
  #      - name: Deploy to Kubernetes using Helm
  #        if: github.event_name == 'push'
  #        run: |
  #          helm dependency update ./deployment/app
  #          helm upgrade --install devblog-app ./deployment/app -f ./deployment/app/values.yaml \
  #          --set ${{ env.MODULE_NAME }}.codeVersion=${{ env.CURRENT_VERSION }} \
  #          --set ${{ env.MODULE_NAME }}.enabled=true \
  #          --set ${{ env.MODULE_NAME }}.image.tag=${{ env.TAG }}

  cleanup:
    runs-on: ubuntu-latest
    needs: build-and-deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up jq
        run: sudo apt-get install jq -y

      - name: Set GHCR_URL
        run: echo "GHCR_URL=https://api.github.com/users/${GITHUB_REPOSITORY_OWNER}/packages/container/${IMAGE_NAME}/versions" >> $GITHUB_ENV

      - name: List images in GitHub Container Registry and delete all except last 2
        id: list_images
        env:
          GHCR_TOKEN: ${{ secrets.GHCR_PAT }}
        run: |
          # List images
          IMAGE_LIST=$(curl -H "Authorization: Bearer $GHCR_TOKEN" "$GHCR_URL" | jq -r '.[].id')
          
          # Split the image list into an array
          IMAGE_IDS=()
          while IFS= read -r line; do
            IMAGE_IDS+=("$line")
          done <<< "$IMAGE_LIST"
          
          # Number of images to keep
          IMAGES_TO_KEEP=2
          
          # Check if the number of images exceeds the number to keep
          if [ ${#IMAGE_IDS[@]} -gt $IMAGES_TO_KEEP ]; then
            # Images to delete
            IMAGES_TO_DELETE=("${IMAGE_IDS[@]:$IMAGES_TO_KEEP}")
          
            # Delete old images
            for IMAGE_ID in "${IMAGES_TO_DELETE[@]}"; do
              curl -X DELETE -H "Authorization: Bearer $GHCR_TOKEN" "$GHCR_URL/$IMAGE_ID"
            done
          fi